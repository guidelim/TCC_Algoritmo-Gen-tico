export default function arrayInspections(turns) {
    const array = [
        {
            itenInspection: 'Sinto-me bem físico e mentalmente?',
            critical: true,
            method: 'Auto avaliação para todos do time',
            condition: 'Bem estar - saudável - confiante',
            db: 'fisico',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").FISICO : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").FISICO : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").FISICO : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").FISICO : ""      
        },
        {
            itenInspection: 'Botão/Cordão Emergência',
            critical: true,
            method: 'Operacional',
            condition: 'Funcionando',
            db: 'emerbotao',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").EMERBOTAO : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").EMERBOTAO : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").EMERBOTAO : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").EMERBOTAO : ""         
        },
        {
            itenInspection: 'Protenção Junção',
            critical: true,
            method: 'Visual',
            condition: 'Instalado',
            db: 'junbotao',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").JUNBOTAO : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").JUNBOTAO : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").JUNBOTAO : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").JUNBOTAO : ""        
        },
        {
            itenInspection: 'Rolamento',
            critical: true,
            method: 'Visual',
            condition: 'Protegido, sem partes expostas',
            db: 'rolamento',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").ROLAMENTO : "",
             turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").ROLAMENTO : "",
             turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").ROLAMENTO : "",
             turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").ROLAMENTO : ""         
        },
        {
            itenInspection: 'Fiação Elétrica',
            critical: true,
            method: 'Visual',
            condition: 'Na eletrocalha, escapada',
            db: 'fiacao',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").FIACAO : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").FIACAO : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").FIACAO : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").FIACAO : ""
        },
        {
            itenInspection: 'Painel de comando',
            critical: true,
            method: 'Operacional Visual',
            condition: 'Funcionando',
            db: 'comando',  
            validation: 'OK',       
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").COMANDO : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").COMANDO : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").COMANDO : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").COMANDO : ""
        },
        {
            itenInspection: 'Junções Sinalizadas',
            critical: true,
            method: 'Operacional',
            condition: 'Sinalizadas',
            db: 'junsinalizadas',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").JUNSINALIZADAS : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").JUNSINALIZADAS : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").JUNSINALIZADAS : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").JUNSINALIZADAS : ""
        },
        {
            itenInspection: 'Botão de liga/desliga',
            critical: true,
            method: 'Operacional',
            condition: 'Funcionando',
            db: 'botaoonoff',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").BOTAOONOFF : "", 
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").BOTAOONOFF : "", 
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").BOTAOONOFF : "", 
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").BOTAOONOFF : ""
         },
        {
            itenInspection: 'Junções com proteção',
            critical: true,
            method: 'Visual',
            condition: 'Tampando buraco entre módulos, espaçamento',
            db: 'junprotecao',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").JUNPROTECAO : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").JUNPROTECAO : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").JUNPROTECAO : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").JUNPROTECAO : "" 
        },
        {
            itenInspection: 'Stop Fim de Linha',
            critical: true,
            method: 'Operacional',
            condition: 'Funcionando',
            db: 'stopfim',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").STOPFIM : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").STOPFIM : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").STOPFIM : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").STOPFIM : ""
        },
        {
            itenInspection: 'Esteira Nivelada',
            critical: false,
            method: 'Visual',
            condition: 'Nivelada',
            db: 'nivelesteira',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").NIVELESTEIRA : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").NIVELESTEIRA : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").NIVELESTEIRA : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").NIVELESTEIRA : ""
        },
        {
            itenInspection: 'Tomadas',
            critical: false,
            method: 'Visual',
            condition: 'Identificada/Sem cabo exposto',
            db: 'tomadas',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").TOMADAS : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").TOMADAS : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").TOMADAS : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").TOMADAS : ""
        },
        {
            itenInspection: 'Lona transportadora',
            critical: false,
            method: 'Visual',
            condition: 'Sem avarias - alinhada',
            db: 'lona',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").LONA : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").LONA : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").LONA : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").LONA : ""    
        },
        {
            itenInspection: 'Tapetes ergonômicos',
            critical: false,
            method: 'Visual',
            condition: 'Nos Locais',
            db: 'tapetes',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").TAPETES : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").TAPETES : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").TAPETES : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").TAPETES : ""
        },
        {
            itenInspection: 'Fixadores Cordão Emergencial',
            critical: false,
            method: 'Operacional',
            condition: 'Instalados',
            db: 'fixadores',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").FIXADORES : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").FIXADORES : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").FIXADORES : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").FIXADORES : "" 
        },
        {
            itenInspection: 'Limpeza',
            critical: false,
            method: 'Visual',
            condition: 'Limpo e organizado',
            db: 'limpeza',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").LIMPEZA : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").LIMPEZA : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").LIMPEZA : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").LIMPEZA : ""
        },
        {
            itenInspection: 'Barreira acesso às junções',
            critical: true,
            method: 'Visual',
            condition: 'Impossibilitando acesso - 85cm. Junções de módulo e fim de curso com Flowrack.',
            db: 'barreira',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").BARREIRA : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").BARREIRA : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").BARREIRA : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").BARREIRA : ""
        },
        {
            itenInspection: 'Layout e rota',
            critical: false,
            method: 'Visual',
            condition: 'Proporciona Evacuação',
            db: 'layout',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").LAYOUT : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").LAYOUT : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").LAYOUT : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").LAYOUT : ""      
        },
        {
            itenInspection: 'Bancos Engonômicos',
            critical: false,
            method: 'Visual',
            condition: 'No local',
            db: 'bancos',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").BANCOS : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").BANCOS : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").BANCOS : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").BANCOS : ""
        },
        {
            itenInspection: 'Puchadores de Pacotes',
            critical: false,
            method: 'Operacional Visual',
            condition: 'Dispostos no local',
            db: 'puchadores',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").PUCHADORES : "", 
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").PUCHADORES : "", 
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").PUCHADORES : "", 
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").PUCHADORES : ""
         },
        {
            itenInspection: 'Pallets e Gaiolas',
            critical: false,
            method: 'Operacional',
            condition: 'Dentro do Layout',
            db: 'pallets',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").PALLETS : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").PALLETS : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").PALLETS : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").PALLETS : ""
        },
        {
            itenInspection: 'Flow Rack',
            critical: false,
            method: 'Operacional',
            condition: 'Em condições/Alinhado',
            db: 'flowrack',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").FLOWRACK : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").FLOWRACK : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").FLOWRACK : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").FLOWRACK : ""
        },
        {
            itenInspection: 'Extintores',
            critical: false,
            method: 'Operacional',
            condition: 'Em condições de Uso',
            db: 'extintores',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").EXTINTORES : "", 
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").EXTINTORES : "", 
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").EXTINTORES : "", 
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").EXTINTORES : ""
         },
        {
            itenInspection: 'Camisa dentro Calça',
            critical: false,
            method: 'Visual',
            condition: 'Atende HSE',
            db: 'camisa',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").CAMISA: "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").CAMISA : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").CAMISA : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").CAMISA : ""
        },
        {
            itenInspection: 'Cabelo Preso',
            critical: false,
            method: 'Visual',
            condition: 'Atende HSE',
            db: 'cabelopreso',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").CABELOPRESO : "",
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").CABELOPRESO : "",
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").CABELOPRESO : "",
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").CABELOPRESO : ""
        },
        {
            itenInspection: 'Micro Pausa',
            critical: false,
            method: 'Visual',
            condition: 'Realizado',
            db: 'micropausa',
            validation: 'OK',
            turn1: turns !== '' ? turns.find(info => info.TURNO == "turn1").MICROPAUSA : "", 
            turn2: turns !== '' ? turns.find(info => info.TURNO == "turn2").MICROPAUSA : "", 
            turn3: turns !== '' ? turns.find(info => info.TURNO == "turn3").MICROPAUSA : "", 
            turn4: turns !== '' ? turns.find(info => info.TURNO == "turn4").MICROPAUSA : ""
         },
    ];

    return array
}